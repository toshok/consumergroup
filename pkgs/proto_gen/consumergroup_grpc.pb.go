// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: consumergroup.proto

package proto_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsumerCoordinator_JoinGroup_FullMethodName  = "/consumergroup.ConsumerCoordinator/JoinGroup"
	ConsumerCoordinator_SyncGroup_FullMethodName  = "/consumergroup.ConsumerCoordinator/SyncGroup"
	ConsumerCoordinator_Heartbeat_FullMethodName  = "/consumergroup.ConsumerCoordinator/Heartbeat"
	ConsumerCoordinator_LeaveGroup_FullMethodName = "/consumergroup.ConsumerCoordinator/LeaveGroup"
)

// ConsumerCoordinatorClient is the client API for ConsumerCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerCoordinatorClient interface {
	JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error)
	SyncGroup(ctx context.Context, in *SyncGroupRequest, opts ...grpc.CallOption) (*SyncGroupResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error)
}

type consumerCoordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerCoordinatorClient(cc grpc.ClientConnInterface) ConsumerCoordinatorClient {
	return &consumerCoordinatorClient{cc}
}

func (c *consumerCoordinatorClient) JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*JoinGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinGroupResponse)
	err := c.cc.Invoke(ctx, ConsumerCoordinator_JoinGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerCoordinatorClient) SyncGroup(ctx context.Context, in *SyncGroupRequest, opts ...grpc.CallOption) (*SyncGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncGroupResponse)
	err := c.cc.Invoke(ctx, ConsumerCoordinator_SyncGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerCoordinatorClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, ConsumerCoordinator_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerCoordinatorClient) LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*LeaveGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveGroupResponse)
	err := c.cc.Invoke(ctx, ConsumerCoordinator_LeaveGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerCoordinatorServer is the server API for ConsumerCoordinator service.
// All implementations must embed UnimplementedConsumerCoordinatorServer
// for forward compatibility.
type ConsumerCoordinatorServer interface {
	JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error)
	SyncGroup(context.Context, *SyncGroupRequest) (*SyncGroupResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error)
	mustEmbedUnimplementedConsumerCoordinatorServer()
}

// UnimplementedConsumerCoordinatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsumerCoordinatorServer struct{}

func (UnimplementedConsumerCoordinatorServer) JoinGroup(context.Context, *JoinGroupRequest) (*JoinGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedConsumerCoordinatorServer) SyncGroup(context.Context, *SyncGroupRequest) (*SyncGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncGroup not implemented")
}
func (UnimplementedConsumerCoordinatorServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedConsumerCoordinatorServer) LeaveGroup(context.Context, *LeaveGroupRequest) (*LeaveGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedConsumerCoordinatorServer) mustEmbedUnimplementedConsumerCoordinatorServer() {}
func (UnimplementedConsumerCoordinatorServer) testEmbeddedByValue()                             {}

// UnsafeConsumerCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerCoordinatorServer will
// result in compilation errors.
type UnsafeConsumerCoordinatorServer interface {
	mustEmbedUnimplementedConsumerCoordinatorServer()
}

func RegisterConsumerCoordinatorServer(s grpc.ServiceRegistrar, srv ConsumerCoordinatorServer) {
	// If the following call pancis, it indicates UnimplementedConsumerCoordinatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsumerCoordinator_ServiceDesc, srv)
}

func _ConsumerCoordinator_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerCoordinatorServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerCoordinator_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerCoordinatorServer).JoinGroup(ctx, req.(*JoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerCoordinator_SyncGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerCoordinatorServer).SyncGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerCoordinator_SyncGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerCoordinatorServer).SyncGroup(ctx, req.(*SyncGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerCoordinator_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerCoordinatorServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerCoordinator_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerCoordinatorServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerCoordinator_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerCoordinatorServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerCoordinator_LeaveGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerCoordinatorServer).LeaveGroup(ctx, req.(*LeaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsumerCoordinator_ServiceDesc is the grpc.ServiceDesc for ConsumerCoordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumerCoordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "consumergroup.ConsumerCoordinator",
	HandlerType: (*ConsumerCoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinGroup",
			Handler:    _ConsumerCoordinator_JoinGroup_Handler,
		},
		{
			MethodName: "SyncGroup",
			Handler:    _ConsumerCoordinator_SyncGroup_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _ConsumerCoordinator_Heartbeat_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _ConsumerCoordinator_LeaveGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consumergroup.proto",
}
